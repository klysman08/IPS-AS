# Install the readxl package if not installed
# install.packages("readxl")
# Load the readxl package
library(readxl)
# Specify the file path
file_path <- "path/to/Singapore Airbnb - Raw.xlsx"
# Read the Excel file
data <- read_excel(file_path)
# Install the readxl package if not installed
# install.packages("readxl")
# Load the readxl package
library(readxl)
# Specify the file path
file_path <- "Singapore Airbnb - Raw.xlsx"
# Read the Excel file
data <- read_excel(file_path)
# Get the number of rows and columns
num_rows <- dim(data)[1]
num_cols <- dim(data)[2]
# Get the column names
column_names <- colnames(data)
# Print the results
cat("Number of rows:", num_rows, "\n")
cat("Number of columns:", num_cols, "\n")
cat("Column names:", paste(column_names, collapse = ", "), "\n")
# Calculate the number of missing values in each column
missing_values <- colSums(is.na(data))
# Display the results
print("Number of missing values in each column:")
print(missing_values)
# Identificar e remover elementos duplicados
duplicated_rows <- duplicated(data)
data_without_duplicates <- data[!duplicated_rows, ]
# Display information about removed duplicates
cat("Number of duplicate rows removed:", sum(duplicated_rows), "\n")
# Optional: If you want to reset row indices after removing duplicates
data_without_duplicates <- data.frame(data_without_duplicates, row.names = NULL)
# Display the updated number of rows and columns
cat("Number of rows after removing duplicates:", nrow(data_without_duplicates), "\n")
cat("Number of columns:", ncol(data_without_duplicates), "\n")
boxplot(data)
# Create boxplots for all numeric columns
for (col in names(data)) {
if (is.numeric(data[[col]])) {
ggplot(data, aes(x = 1, y = data[[col]])) +
geom_boxplot() +
labs(title = paste("Boxplot of", col),
x = NULL, y = col) +
theme_minimal() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
}
}
libery(ggplot)
library(ggplot2)
library(ggplot2)
# Create boxplots for all numeric columns
for (col in names(data)) {
if (is.numeric(data[[col]])) {
ggplot(data, aes(x = 1, y = data[[col]])) +
geom_boxplot() +
labs(title = paste("Boxplot of", col),
x = NULL, y = col) +
theme_minimal() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
}
}
library(ggplot2)
boxplots_list <- list()
for (col in names(data)) {
if (is.numeric(data[[col]])) {
boxplot <- ggplot(data, aes(x = 1, y = data[[col]])) +
geom_boxplot() +
labs(title = paste("Boxplot of", col),
x = NULL, y = col) +
theme_minimal() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
boxplots_list[[col]] <- boxplot
}
}
# Arrange and display the boxplots
grid.arrange(grobs = boxplots_list, ncol = 2)
library(ggplot2)
library(gridExtra)
boxplots_list <- list()
for (col in names(data)) {
if (is.numeric(data[[col]])) {
boxplot <- ggplot(data, aes(x = 1, y = data[[col]])) +
geom_boxplot() +
labs(title = paste("Boxplot of", col),
x = NULL, y = col) +
theme_minimal() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
boxplots_list[[col]] <- boxplot
}
}
# Arrange and display the boxplots
grid.arrange(grobs = boxplots_list, ncol = 2)
ibrary(ggplot2)
library(ggplot2)
# Create boxplots for all numeric columns
for (col in names(data)) {
if (is.numeric(data[[col]])) {
ggplot(data, aes(x = 1, y = data[[col]])) +
geom_boxplot() +
labs(title = paste("Boxplot of", col),
x = NULL, y = col) +
theme_minimal() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
}
}
boxplot(data_without_duplicates$price)
for (col in names(data)) {
if (is.numeric(data[[col]])) {
boxplot(data[[col]], main = paste("Boxplot of", col), ylab = col)
}
}
# Function to remove outliers based on IQR
remove_outliers <- function(x) {
Q1 <- quantile(x, 0.25)
Q3 <- quantile(x, 0.75)
IQR_value <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR_value
upper_bound <- Q3 + 1.5 * IQR_value
x_filtered <- x[x >= lower_bound & x <= upper_bound]
return(x_filtered)
}
# Apply the function to all numeric columns
for (col in names(data_without_duplicates)[numeric_columns]) {
data_without_duplicates[[col]] <- remove_outliers(data_without_duplicates[[col]])
}
# Read the Excel file
data <- read_excel(file_path)
# Function to remove outliers based on IQR
remove_outliers <- function(x) {
Q1 <- quantile(x, 0.25)
Q3 <- quantile(x, 0.75)
IQR_value <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR_value
upper_bound <- Q3 + 1.5 * IQR_value
x_filtered <- x[x >= lower_bound & x <= upper_bound]
return(x_filtered)
}
# Apply the function to all numeric columns
numeric_columns <- sapply(data, is.numeric)
for (col in names(data)[numeric_columns]) {
data[[col]] <- remove_outliers(data[[col]])
}
# Read the Excel file
data <- read_excel(file_path)
# Function to remove outliers based on IQR
remove_outliers <- function(x) {
Q1 <- quantile(x, 0.25, na.rm = TRUE)
Q3 <- quantile(x, 0.75, na.rm = TRUE)
IQR_value <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR_value
upper_bound <- Q3 + 1.5 * IQR_value
x_filtered <- x[x >= lower_bound & x <= upper_bound]
return(x_filtered)
}
# Apply the function to all numeric columns
numeric_columns <- sapply(data, is.numeric)
for (col in names(data)[numeric_columns]) {
data[[col]] <- remove_outliers(data[[col]])
}
rm(list=ls())
library(dplyr)
library("readxl")
setwd("G:/My Drive/IPS/Mestrado/UCs/Aprendizage supervisionada/IPS-ESCE SP ML/Session 3/Data")
class <- c("numeric", "character", "factor", "numeric", "numeric")
pollution <- read.csv("avgpm25.csv", colClasses = class)
head(pollution)
str(pollution)
summary(pollution$pm25)
#--- Boxplot
boxplot(pollution$pm25, col = "blue")
#-- Outliers
boxplot(pollution$pm25, col = "blue")$out
#--- Histogram
hist(pollution$pm25, col = "green")
rug(pollution$pm25)
par(mfrow = c(2, 1))
hist(subset(pollution, region == "east")$pm25, col = "green")
hist(subset(pollution, region == "west")$pm25, col = "red")
par(mfrow = c(1, 1))
