q3 <- boxplot_output$stats[4]
max_value <- boxplot_output$stats[5]
# Imprime os resultados
cat("Valor mínimo:", min_value, "\n")
cat("Primeiro quartil:", q1, "\n")
cat("Mediana:", median, "\n")
cat("Terceiro quartil:", q3, "\n")
cat("Valor máximo:", max_value, "\n")
barplot(table(data_filtered_500$room_type), main = "Gráfico de Barras - Room Type", xlab = "Room Type", ylab = "Frequência")
barplot(table(data_filtered_500$neighbourhood_group), main = "Gráfico de Barras - neighbourhood_group", xlab = "neighbourhood_group", ylab = "Frequência")
# Obtém o índice da linha com o maior valor em number_of_reviews
index <- which.max(data_filtered_500$number_of_reviews)
# Obtém a linha completa com o maior valor em number_of_reviews
row_with_max_reviews <- data_filtered_500[index, ]
# Imprime a linha completa
print(row_with_max_reviews)
library(ggplot2)
# Cria o gráfico de barras usando ggplot2
ggplot(data_filtered_500, aes(x = room_type)) +
geom_bar(fill = "blue", color = "black") +
labs(x = "Tipo de Quarto", y = "Contagem") +
ggtitle("Contagem de Quartos por Tipo")
ggplot(data_filtered_500, aes(x = neighbourhood_group)) +
geom_bar(fill = "blue", color = "black") +
labs(x = "Neighbourhood Group", y = "Count") +
ggtitle("Count of Listings by Neighbourhood Group")
ggplot(data_filtered_500, aes(x = price, y = number_of_reviews)) +
geom_point() +
labs(x = "Price", y = "Number of Reviews") +
ggtitle("Price vs. Number of Reviews")
ggplot(data_filtered_500, aes(x = neighbourhood_group, y = price)) +
geom_boxplot() +
labs(x = "Neighbourhood Group", y = "Price") +
ggtitle("Price Distribution by Neighbourhood Group")
ggplot(data_filtered_500, aes(x = price, fill = room_type)) +
geom_density(alpha = 0.5) +
labs(x = "Price", y = "Density") +
ggtitle("Price Distribution by Room Type")
library(openxlsx)
# Especifique o nome do arquivo de saída
new_data <- "G:/My Drive/IPS/Mestrado/UCs/Aprendizage supervisionada/IPS-ESCE SP ML/Session 3/Data/data_filtered_500_price.xlsx"
# Salve o dataframe em um arquivo XLSX
write.xlsx(data_filtered_500, file = new_data)
library(readxl)
file_path <- "G:/My Drive/IPS/Mestrado/UCs/Aprendizage supervisionada/IPS-ESCE SP ML/Session 3/Data/Singapore Airbnb - Raw.xlsx"
data <- read_excel(file_path)
num_rows <- dim(data)[1]
num_cols <- dim(data)[2]
column_names <- colnames(data)
cat("Number of rows:", num_rows, "\n")
cat("Number of columns:", num_cols, "\n")
cat("Column names:", paste(column_names, collapse = ", "), "\n")
missing_values <- colSums(is.na(data))
print("Number of missing values in each column:")
print(missing_values)
head(data)
summary(data)
#Remover colunas desnecessárias
data <- data[, c("neighbourhood_group", "name", "host_id", "host_name", "neighbourhood", "latitude", "number_of_reviews", "longitude", "room_type", "price", "availability_365")]
data_clean <- data[complete.cases(data), ]
data_unique <- subset(data_clean, !duplicated(data_clean))
# Seleciona as colunas desejadas para criar os boxplots
boxplot(data_unique$price, col = "green", ylim = c(0, 1000))
data_filtered_500 <- subset(data_unique, price < 500)
boxplot_output <- boxplot(data_filtered_500$price, col = "green", ylim = c(0, 500))
# Acessa os resultados matemáticos do boxplot
min_value <- boxplot_output$stats[1]
q1 <- boxplot_output$stats[2]
median <- boxplot_output$stats[3]
q3 <- boxplot_output$stats[4]
max_value <- boxplot_output$stats[5]
# Imprime os resultados
cat("Valor mínimo:", min_value, "\n")
cat("Primeiro quartil:", q1, "\n")
cat("Mediana:", median, "\n")
cat("Terceiro quartil:", q3, "\n")
cat("Valor máximo:", max_value, "\n")
barplot(table(data_filtered_500$room_type), main = "Gráfico de Barras - Room Type", xlab = "Room Type", ylab = "Frequência")
barplot(table(data_filtered_500$neighbourhood_group), main = "Gráfico de Barras - neighbourhood_group", xlab = "neighbourhood_group", ylab = "Frequência")
# Obtém o índice da linha com o maior valor em number_of_reviews
index <- which.max(data_filtered_500$number_of_reviews)
# Obtém a linha completa com o maior valor em number_of_reviews
row_with_max_reviews <- data_filtered_500[index, ]
# Imprime a linha completa
print(row_with_max_reviews)
library(ggplot2)
# Cria o gráfico de barras usando ggplot2
ggplot(data_filtered_500, aes(x = room_type)) +
geom_bar(fill = "blue", color = "black") +
labs(x = "Tipo de Quarto", y = "Contagem") +
ggtitle("Contagem de Quartos por Tipo")
ggplot(data_filtered_500, aes(x = neighbourhood_group)) +
geom_bar(fill = "blue", color = "black") +
labs(x = "Neighbourhood Group", y = "Count") +
ggtitle("Count of Listings by Neighbourhood Group")
ggplot(data_filtered_500, aes(x = price, y = number_of_reviews)) +
geom_point() +
labs(x = "Price", y = "Number of Reviews") +
ggtitle("Price vs. Number of Reviews")
ggplot(data_filtered_500, aes(x = neighbourhood_group, y = price)) +
geom_boxplot() +
labs(x = "Neighbourhood Group", y = "Price") +
ggtitle("Price Distribution by Neighbourhood Group")
ggplot(data_filtered_500, aes(x = price, fill = room_type)) +
geom_density(alpha = 0.5) +
labs(x = "Price", y = "Density") +
ggtitle("Price Distribution by Room Type")
library(openxlsx)
new_data <- "G:/My Drive/IPS/Mestrado/UCs/Aprendizage supervisionada/IPS-ESCE SP ML/Session 3/Data/data_filtered_500_price.xlsx"
write.xlsx(data_filtered_500, file = new_data)
library(readxl)
file_path <- "G:/My Drive/IPS/Mestrado/UCs/Aprendizage supervisionada/IPS-ESCE SP ML/Session 3/Data/Singapore Airbnb - Raw.xlsx"
data <- read_excel(file_path)
num_rows <- dim(data)[1]
num_cols <- dim(data)[2]
column_names <- colnames(data)
cat("Number of rows:", num_rows, "\n")
cat("Number of columns:", num_cols, "\n")
cat("Column names:", paste(column_names, collapse = ", "), "\n")
missing_values <- colSums(is.na(data))
print("Number of missing values in each column:")
print(missing_values)
head(data)
summary(data)
#Remover colunas desnecessárias
data <- data[, c("neighbourhood_group", "name", "host_id", "host_name", "neighbourhood", "latitude", "number_of_reviews", "longitude", "room_type", "price", "availability_365")]
data_clean <- data[complete.cases(data), ]
data_unique <- subset(data_clean, !duplicated(data_clean))
# Seleciona as colunas desejadas para criar os boxplots
boxplot(data_unique$price, col = "green", ylim = c(0, 1000))
data_filtered_500 <- subset(data_unique, price < 500)
boxplot_output <- boxplot(data_filtered_500$price, col = "green", ylim = c(0, 500))
# Acessa os resultados matemáticos do boxplot
min_value <- boxplot_output$stats[1]
q1 <- boxplot_output$stats[2]
median <- boxplot_output$stats[3]
q3 <- boxplot_output$stats[4]
max_value <- boxplot_output$stats[5]
# Imprime os resultados
cat("Valor mínimo:", min_value, "\n")
cat("Primeiro quartil:", q1, "\n")
cat("Mediana:", median, "\n")
cat("Terceiro quartil:", q3, "\n")
cat("Valor máximo:", max_value, "\n")
barplot(table(data_filtered_500$room_type), main = "Gráfico de Barras - Room Type", xlab = "Room Type", ylab = "Frequência")
barplot(table(data_filtered_500$neighbourhood_group), main = "Gráfico de Barras - neighbourhood_group", xlab = "neighbourhood_group", ylab = "Frequência")
# Obtém o índice da linha com o maior valor em number_of_reviews
index <- which.max(data_filtered_500$number_of_reviews)
# Obtém a linha completa com o maior valor em number_of_reviews
row_with_max_reviews <- data_filtered_500[index, ]
# Imprime a linha completa
print(row_with_max_reviews)
library(ggplot2)
# Cria o gráfico de barras usando ggplot2
ggplot(data_filtered_500, aes(x = room_type)) +
geom_bar(fill = "blue", color = "black") +
labs(x = "Tipo de Quarto", y = "Contagem") +
ggtitle("Contagem de Quartos por Tipo")
ggplot(data_filtered_500, aes(x = neighbourhood_group)) +
geom_bar(fill = "blue", color = "black") +
labs(x = "Neighbourhood Group", y = "Count") +
ggtitle("Count of Listings by Neighbourhood Group")
ggplot(data_filtered_500, aes(x = price, y = number_of_reviews)) +
geom_point() +
labs(x = "Price", y = "Number of Reviews") +
ggtitle("Price vs. Number of Reviews")
ggplot(data_filtered_500, aes(x = neighbourhood_group, y = price)) +
geom_boxplot() +
labs(x = "Neighbourhood Group", y = "Price") +
ggtitle("Price Distribution by Neighbourhood Group")
ggplot(data_filtered_500, aes(x = price, fill = room_type)) +
geom_density(alpha = 0.5) +
labs(x = "Price", y = "Density") +
ggtitle("Price Distribution by Room Type")
library(openxlsx)
new_data <- "G:/My Drive/IPS/Mestrado/UCs/Aprendizage supervisionada/IPS-ESCE SP ML/Session 3/Data/data_filtered_500_price.xlsx"
write.xlsx(data_filtered_500, file = new_data)
library(readxl)
file_path <- "G:/My Drive/IPS/Mestrado/UCs/Aprendizage supervisionada/IPS-ESCE SP ML/Session 3/Data/Singapore Airbnb - Raw.xlsx"
data <- read_excel(file_path)
num_rows <- dim(data)[1]
num_cols <- dim(data)[2]
column_names <- colnames(data)
cat("Number of rows:", num_rows, "\n")
cat("Number of columns:", num_cols, "\n")
cat("Column names:", paste(column_names, collapse = ", "), "\n")
missing_values <- colSums(is.na(data))
print("Number of missing values in each column:")
print(missing_values)
head(data)
summary(data)
#Remover colunas desnecessárias
data <- data[, c("neighbourhood_group", "name", "host_id", "host_name", "neighbourhood", "latitude", "number_of_reviews", "longitude", "room_type", "price", "availability_365")]
data_clean <- data[complete.cases(data), ]
data_unique <- subset(data_clean, !duplicated(data_clean))
# Seleciona as colunas desejadas para criar os boxplots
boxplot(data_unique$price, col = "green", ylim = c(0, 1000))
data_filtered_500 <- subset(data_unique, price < 500)
boxplot_output <- boxplot(data_filtered_500$price, col = "green", ylim = c(0, 500))
# Acessa os resultados matemáticos do boxplot
min_value <- boxplot_output$stats[1]
q1 <- boxplot_output$stats[2]
median <- boxplot_output$stats[3]
q3 <- boxplot_output$stats[4]
max_value <- boxplot_output$stats[5]
# Imprime os resultados
cat("Valor mínimo:", min_value, "\n")
cat("Primeiro quartil:", q1, "\n")
cat("Mediana:", median, "\n")
cat("Terceiro quartil:", q3, "\n")
cat("Valor máximo:", max_value, "\n")
barplot(table(data_filtered_500$room_type), main = "Gráfico de Barras - Room Type", xlab = "Room Type", ylab = "Frequência")
barplot(table(data_filtered_500$neighbourhood_group), main = "Gráfico de Barras - neighbourhood_group", xlab = "neighbourhood_group", ylab = "Frequência")
# Obtém o índice da linha com o maior valor em number_of_reviews
index <- which.max(data_filtered_500$number_of_reviews)
# Obtém a linha completa com o maior valor em number_of_reviews
row_with_max_reviews <- data_filtered_500[index, ]
# Imprime a linha completa
print(row_with_max_reviews)
library(ggplot2)
# Cria o gráfico de barras usando ggplot2
ggplot(data_filtered_500, aes(x = room_type)) +
geom_bar(fill = "blue", color = "black") +
labs(x = "Tipo de Quarto", y = "Contagem") +
ggtitle("Contagem de Quartos por Tipo")
ggplot(data_filtered_500, aes(x = neighbourhood_group)) +
geom_bar(fill = "blue", color = "black") +
labs(x = "Neighbourhood Group", y = "Count") +
ggtitle("Count of Listings by Neighbourhood Group")
ggplot(data_filtered_500, aes(x = price, y = number_of_reviews)) +
geom_point() +
labs(x = "Price", y = "Number of Reviews") +
ggtitle("Price vs. Number of Reviews")
ggplot(data_filtered_500, aes(x = neighbourhood_group, y = price)) +
geom_boxplot() +
labs(x = "Neighbourhood Group", y = "Price") +
ggtitle("Price Distribution by Neighbourhood Group")
ggplot(data_filtered_500, aes(x = price, fill = room_type)) +
geom_density(alpha = 0.5) +
labs(x = "Price", y = "Density") +
ggtitle("Price Distribution by Room Type")
library(openxlsx)
new_data <- "G:/My Drive/IPS/Mestrado/UCs/Aprendizage supervisionada/IPS-ESCE SP ML/Session 3/Data/data_filtered_500_price.xlsx"
write.xlsx(data_filtered_500, file = new_data)
library(readxl)
file_path <- "G:/My Drive/IPS/Mestrado/UCs/Aprendizage supervisionada/IPS-ESCE SP ML/Session 3/Data/Singapore Airbnb - Raw.xlsx"
data <- read_excel(file_path)
num_rows <- dim(data)[1]
num_cols <- dim(data)[2]
column_names <- colnames(data)
cat("Number of rows:", num_rows, "\n")
cat("Number of columns:", num_cols, "\n")
cat("Column names:", paste(column_names, collapse = ", "), "\n")
missing_values <- colSums(is.na(data))
print("Number of missing values in each column:")
print(missing_values)
head(data)
summary(data)
#Remover colunas desnecessárias
data <- data[, c("neighbourhood_group", "name", "host_id", "host_name", "neighbourhood", "latitude", "number_of_reviews", "longitude", "room_type", "price", "availability_365")]
data_clean <- data[complete.cases(data), ]
data_unique <- subset(data_clean, !duplicated(data_clean))
# Seleciona as colunas desejadas para criar os boxplots
boxplot(data_unique$price, col = "green", ylim = c(0, 1000))
data_filtered_500 <- subset(data_unique, price < 500)
boxplot_output <- boxplot(data_filtered_500$price, col = "green", ylim = c(0, 500))
# Acessa os resultados matemáticos do boxplot
min_value <- boxplot_output$stats[1]
q1 <- boxplot_output$stats[2]
median <- boxplot_output$stats[3]
q3 <- boxplot_output$stats[4]
max_value <- boxplot_output$stats[5]
# Imprime os resultados
cat("Valor mínimo:", min_value, "\n")
cat("Primeiro quartil:", q1, "\n")
cat("Mediana:", median, "\n")
cat("Terceiro quartil:", q3, "\n")
cat("Valor máximo:", max_value, "\n")
barplot(table(data_filtered_500$room_type), main = "Gráfico de Barras - Room Type", xlab = "Room Type", ylab = "Frequência")
barplot(table(data_filtered_500$neighbourhood_group), main = "Gráfico de Barras - neighbourhood_group", xlab = "neighbourhood_group", ylab = "Frequência")
# Obtém o índice da linha com o maior valor em number_of_reviews
index <- which.max(data_filtered_500$number_of_reviews)
# Obtém a linha completa com o maior valor em number_of_reviews
row_with_max_reviews <- data_filtered_500[index, ]
# Imprime a linha completa
print(row_with_max_reviews)
library(ggplot2)
# Cria o gráfico de barras usando ggplot2
ggplot(data_filtered_500, aes(x = room_type)) +
geom_bar(fill = "blue", color = "black") +
labs(x = "Tipo de Quarto", y = "Contagem") +
ggtitle("Contagem de Quartos por Tipo")
ggplot(data_filtered_500, aes(x = neighbourhood_group)) +
geom_bar(fill = "blue", color = "black") +
labs(x = "Neighbourhood Group", y = "Count") +
ggtitle("Count of Listings by Neighbourhood Group")
ggplot(data_filtered_500, aes(x = price, y = number_of_reviews)) +
geom_point() +
labs(x = "Price", y = "Number of Reviews") +
ggtitle("Price vs. Number of Reviews")
ggplot(data_filtered_500, aes(x = neighbourhood_group, y = price)) +
geom_boxplot() +
labs(x = "Neighbourhood Group", y = "Price") +
ggtitle("Price Distribution by Neighbourhood Group")
ggplot(data_filtered_500, aes(x = price, fill = room_type)) +
geom_density(alpha = 0.5) +
labs(x = "Price", y = "Density") +
ggtitle("Price Distribution by Room Type")
library(openxlsx)
new_data <- "G:/My Drive/IPS/Mestrado/UCs/Aprendizage supervisionada/IPS-ESCE SP ML/Session 3/Data/data_filtered_500_price.xlsx"
write.xlsx(data_filtered_500, file = new_data)
library(readxl)
file_path <- "G:/My Drive/IPS/Mestrado/UCs/Aprendizage supervisionada/IPS-ESCE SP ML/Session 3/Data/Singapore Airbnb - Raw.xlsx"
data <- read_excel(file_path)
num_rows <- dim(data)[1]
num_cols <- dim(data)[2]
column_names <- colnames(data)
cat("Number of rows:", num_rows, "\n")
cat("Number of columns:", num_cols, "\n")
cat("Column names:", paste(column_names, collapse = ", "), "\n")
missing_values <- colSums(is.na(data))
print("Number of missing values in each column:")
print(missing_values)
head(data)
summary(data)
#Remover colunas desnecessárias
data <- data[, c("neighbourhood_group", "name", "host_id", "host_name", "neighbourhood", "latitude", "number_of_reviews", "longitude", "room_type", "price", "availability_365")]
data_clean <- data[complete.cases(data), ]
data_unique <- subset(data_clean, !duplicated(data_clean))
# Seleciona as colunas desejadas para criar os boxplots
boxplot(data_unique$price, col = "green", ylim = c(0, 1000))
data_filtered_500 <- subset(data_unique, price < 500)
boxplot_output <- boxplot(data_filtered_500$price, col = "green", ylim = c(0, 500))
# Acessa os resultados matemáticos do boxplot
min_value <- boxplot_output$stats[1]
q1 <- boxplot_output$stats[2]
median <- boxplot_output$stats[3]
q3 <- boxplot_output$stats[4]
max_value <- boxplot_output$stats[5]
# Imprime os resultados
cat("Valor mínimo:", min_value, "\n")
cat("Primeiro quartil:", q1, "\n")
cat("Mediana:", median, "\n")
cat("Terceiro quartil:", q3, "\n")
cat("Valor máximo:", max_value, "\n")
barplot(table(data_filtered_500$room_type), main = "Gráfico de Barras - Room Type", xlab = "Room Type", ylab = "Frequência")
barplot(table(data_filtered_500$neighbourhood_group), main = "Gráfico de Barras - neighbourhood_group", xlab = "neighbourhood_group", ylab = "Frequência")
# Obtém o índice da linha com o maior valor em number_of_reviews
index <- which.max(data_filtered_500$number_of_reviews)
# Obtém a linha completa com o maior valor em number_of_reviews
row_with_max_reviews <- data_filtered_500[index, ]
# Imprime a linha completa
print(row_with_max_reviews)
library(ggplot2)
# Cria o gráfico de barras usando ggplot2
ggplot(data_filtered_500, aes(x = room_type)) +
geom_bar(fill = "blue", color = "black") +
labs(x = "Tipo de Quarto", y = "Contagem") +
ggtitle("Contagem de Quartos por Tipo")
ggplot(data_filtered_500, aes(x = neighbourhood_group)) +
geom_bar(fill = "blue", color = "black") +
labs(x = "Neighbourhood Group", y = "Count") +
ggtitle("Count of Listings by Neighbourhood Group")
ggplot(data_filtered_500, aes(x = price, y = number_of_reviews)) +
geom_point() +
labs(x = "Price", y = "Number of Reviews") +
ggtitle("Price vs. Number of Reviews")
ggplot(data_filtered_500, aes(x = neighbourhood_group, y = price)) +
geom_boxplot() +
labs(x = "Neighbourhood Group", y = "Price") +
ggtitle("Price Distribution by Neighbourhood Group")
ggplot(data_filtered_500, aes(x = price, fill = room_type)) +
geom_density(alpha = 0.5) +
labs(x = "Price", y = "Density") +
ggtitle("Price Distribution by Room Type")
library(openxlsx)
new_data <- "G:/My Drive/IPS/Mestrado/UCs/Aprendizage supervisionada/IPS-ESCE SP ML/Session 3/Data/data_filtered_500_price.xlsx"
write.xlsx(data_filtered_500, file = new_data)
library(readxl)
file_path <- "G:/My Drive/IPS/Mestrado/UCs/Aprendizage supervisionada/IPS-ESCE SP ML/Session 3/Data/Singapore Airbnb - Raw.xlsx"
data <- read_excel(file_path)
num_rows <- dim(data)[1]
num_cols <- dim(data)[2]
column_names <- colnames(data)
cat("Number of rows:", num_rows, "\n")
cat("Number of columns:", num_cols, "\n")
cat("Column names:", paste(column_names, collapse = ", "), "\n")
missing_values <- colSums(is.na(data))
print("Number of missing values in each column:")
print(missing_values)
head(data)
summary(data)
#Remover colunas desnecessárias
data <- data[, c("neighbourhood_group", "name", "host_id", "host_name", "neighbourhood", "latitude", "number_of_reviews", "longitude", "room_type", "price", "availability_365")]
data_clean <- data[complete.cases(data), ]
data_unique <- subset(data_clean, !duplicated(data_clean))
# Seleciona as colunas desejadas para criar os boxplots
boxplot(data_unique$price, col = "green", ylim = c(0, 1000))
data_filtered_500 <- subset(data_unique, price < 500)
boxplot_output <- boxplot(data_filtered_500$price, col = "green", ylim = c(0, 500))
# Acessa os resultados matemáticos do boxplot
min_value <- boxplot_output$stats[1]
q1 <- boxplot_output$stats[2]
median <- boxplot_output$stats[3]
q3 <- boxplot_output$stats[4]
max_value <- boxplot_output$stats[5]
# Imprime os resultados
cat("Valor mínimo:", min_value, "\n")
cat("Primeiro quartil:", q1, "\n")
cat("Mediana:", median, "\n")
cat("Terceiro quartil:", q3, "\n")
cat("Valor máximo:", max_value, "\n")
barplot(table(data_filtered_500$room_type), main = "Gráfico de Barras - Room Type", xlab = "Room Type", ylab = "Frequência")
barplot(table(data_filtered_500$neighbourhood_group), main = "Gráfico de Barras - neighbourhood_group", xlab = "neighbourhood_group", ylab = "Frequência")
# Obtém o índice da linha com o maior valor em number_of_reviews
index <- which.max(data_filtered_500$number_of_reviews)
# Obtém a linha completa com o maior valor em number_of_reviews
row_with_max_reviews <- data_filtered_500[index, ]
# Imprime a linha completa
print(row_with_max_reviews)
library(ggplot2)
# Cria o gráfico de barras usando ggplot2
ggplot(data_filtered_500, aes(x = room_type)) +
geom_bar(fill = "blue", color = "black") +
labs(x = "Tipo de Quarto", y = "Contagem") +
ggtitle("Contagem de Quartos por Tipo")
ggplot(data_filtered_500, aes(x = neighbourhood_group)) +
geom_bar(fill = "blue", color = "black") +
labs(x = "Neighbourhood Group", y = "Count") +
ggtitle("Count of Listings by Neighbourhood Group")
ggplot(data_filtered_500, aes(x = price, y = number_of_reviews)) +
geom_point() +
labs(x = "Price", y = "Number of Reviews") +
ggtitle("Price vs. Number of Reviews")
ggplot(data_filtered_500, aes(x = neighbourhood_group, y = price)) +
geom_boxplot() +
labs(x = "Neighbourhood Group", y = "Price") +
ggtitle("Price Distribution by Neighbourhood Group")
ggplot(data_filtered_500, aes(x = price, fill = room_type)) +
geom_density(alpha = 0.5) +
labs(x = "Price", y = "Density") +
ggtitle("Price Distribution by Room Type")
library(openxlsx)
new_data <- "G:/My Drive/IPS/Mestrado/UCs/Aprendizage supervisionada/IPS-ESCE SP ML/Session 3/Data/data_filtered_500_price.xlsx"
write.xlsx(data_filtered_500, file = new_data)
library(readxl)
file_path <- "G:/My Drive/IPS/Mestrado/UCs/Aprendizage supervisionada/IPS-ESCE SP ML/Session 3/Data/Singapore Airbnb - Raw.xlsx"
data <- read_excel(file_path)
num_rows <- dim(data)[1]
num_cols <- dim(data)[2]
column_names <- colnames(data)
cat("Number of rows:", num_rows, "\n")
cat("Number of columns:", num_cols, "\n")
cat("Column names:", paste(column_names, collapse = ", "), "\n")
missing_values <- colSums(is.na(data))
print("Number of missing values in each column:")
print(missing_values)
head(data)
summary(data)
#Remover colunas desnecessárias
data <- data[, c("neighbourhood_group", "name", "host_id", "host_name", "neighbourhood", "latitude", "number_of_reviews", "longitude", "room_type", "price", "availability_365")]
data_clean <- data[complete.cases(data), ]
data_unique <- subset(data_clean, !duplicated(data_clean))
# Seleciona as colunas desejadas para criar os boxplots
boxplot(data_unique$price, col = "green", ylim = c(0, 1000))
data_filtered_500 <- subset(data_unique, price < 500)
boxplot_output <- boxplot(data_filtered_500$price, col = "green", ylim = c(0, 500))
# Acessa os resultados matemáticos do boxplot
min_value <- boxplot_output$stats[1]
q1 <- boxplot_output$stats[2]
median <- boxplot_output$stats[3]
q3 <- boxplot_output$stats[4]
max_value <- boxplot_output$stats[5]
# Imprime os resultados
cat("Valor mínimo:", min_value, "\n")
cat("Primeiro quartil:", q1, "\n")
cat("Mediana:", median, "\n")
cat("Terceiro quartil:", q3, "\n")
cat("Valor máximo:", max_value, "\n")
barplot(table(data_filtered_500$room_type), main = "Gráfico de Barras - Room Type", xlab = "Room Type", ylab = "Frequência")
barplot(table(data_filtered_500$neighbourhood_group), main = "Gráfico de Barras - neighbourhood_group", xlab = "neighbourhood_group", ylab = "Frequência")
# Obtém o índice da linha com o maior valor em number_of_reviews
index <- which.max(data_filtered_500$number_of_reviews)
# Obtém a linha completa com o maior valor em number_of_reviews
row_with_max_reviews <- data_filtered_500[index, ]
# Imprime a linha completa
print(row_with_max_reviews)
library(ggplot2)
# Cria o gráfico de barras usando ggplot2
ggplot(data_filtered_500, aes(x = room_type)) +
geom_bar(fill = "blue", color = "black") +
labs(x = "Tipo de Quarto", y = "Contagem") +
ggtitle("Contagem de Quartos por Tipo")
ggplot(data_filtered_500, aes(x = neighbourhood_group)) +
geom_bar(fill = "blue", color = "black") +
labs(x = "Neighbourhood Group", y = "Count") +
ggtitle("Count of Listings by Neighbourhood Group")
ggplot(data_filtered_500, aes(x = price, y = number_of_reviews)) +
geom_point() +
labs(x = "Price", y = "Number of Reviews") +
ggtitle("Price vs. Number of Reviews")
ggplot(data_filtered_500, aes(x = neighbourhood_group, y = price)) +
geom_boxplot() +
labs(x = "Neighbourhood Group", y = "Price") +
ggtitle("Price Distribution by Neighbourhood Group")
ggplot(data_filtered_500, aes(x = price, fill = room_type)) +
geom_density(alpha = 0.5) +
labs(x = "Price", y = "Density") +
ggtitle("Price Distribution by Room Type")
library(openxlsx)
new_data <- "G:/My Drive/IPS/Mestrado/UCs/Aprendizage supervisionada/IPS-ESCE SP ML/Session 3/Data/data_filtered_500_price.xlsx"
write.xlsx(data_filtered_500, file = new_data)
