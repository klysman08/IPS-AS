source("G:/My Drive/IPS/Mestrado/UCs/Aprendizage supervisionada/IPS-ESCE SP ML/Session 2/R -Codes- Session 2 -Basics - By Vala.R")
? print()
textToPrint <- "this is some text to print"
textToPrint
texttoprint
print("Welcome to R!")
? print()
textToPrint <- "this is some text to print"
textToPrint
texttoprint
# our old friend print()
print(textToPrint)
# the nchar() function tells you the number of characters in a variable
nchar(textToPrint)
# the c() function concatenates (strings together) all its arguments
c(textToPrint, textToPrint, textToPrint)
# Load necessary libraries
library(readxl)
# Task 1: Read the flavors of cacao. Xlsx into the dfCacao data frame
dfCacao <- read_excel("flavors_of_cacao.xlsx")
# Task 2: Display information about the dataset
cat("Number of rows:", nrow(dfCacao), "\n")
cat("Number of columns:", ncol(dfCacao), "\n")
cat("Column names:", names(dfCacao), "\n")
cat("Data types:", sapply(dfCacao, class), "\n")
# Task 3: Sort the dataset descending based on Ratings
dfCacaoSorted <- dfCacao[order(-dfCacao$Ratings), ]
# Task 3: Sort the dataset descending based on Ratings
dfCacaoSorted <- dfCacao[order(-dfCacao$PlaceholderColumnName), ]
View(dfCacao)
# Task 3: Sort the dataset descending based on Ratings
dfCacaoSorted <- dfCacao[order(-dfCacao$Rating), ]
# Task 3: Sort the dataset descending based on Ratings
dfCacaoSorted <- dfCacao[order(-dfCacao$Rating), ]
dfCacaoSorted
# Task 4: Count records in Portugal, Spain, Germany, and USA
dfPortugal <- subset(dfCacao, Country == "Portugal")
# Task 4: Count records in Portugal, Spain, Germany, and USA
dfPortugal <- subset(dfCacao, CompanyLocation == "Portugal")
dfSpain <- subset(dfCacao, CompanyLocation == "Spain")
dfGermany <- subset(dfCacao, CompanyLocation == "Germany")
dfUSA <- subset(dfCacao, CompanyLocation == "USA")
View(dfCacaoSorted)
View(dfPortugal)
# Task 5: Count records in Switzerland in 2010 with a rating of 3.5
dfSwitzerland2010 <- subset(dfCacao, CompanyLocation == "Switzerland" & Year == 2010 & Ratings == 3.5)
View(dfCacao)
# Task 5: Count records in Switzerland in 2010 with a rating of 3.5
dfSwitzerland2010 <- subset(dfCacao, CompanyLocation == "Switzerland" & REF == 2010 & Rating == 3.5)
View(dfSwitzerland2010)
# Task 5: Count records in Switzerland in 2010 with a rating of 3.5
dfSwitzerland2010 <- subset(dfCacao, CompanyLocation == "Switzerland" & REF == 2010 & Rating == 3.75)
View(dfSwitzerland2010)
# Task 5: Count records in Switzerland in 2010 with a rating of 3.5
dfSwitzerland2010 <- subset(dfCacao, CompanyLocation == "Switzerland" & REF == 2011 & Rating == 3.75)
View(dfSwitzerland2010)
# Task 5: Count records in Switzerland in 2010 with a rating of 3.5
dfSwitzerland2010 <- subset(dfCacao, CompanyLocation == "Switzerland" & ReviewDate == 2011 & Rating == 3.75)
View(dfSwitzerland2010)
# Task 5: Count records in Switzerland in 2010 with a rating of 3.5
dfSwitzerland2010 <- subset(dfCacao, CompanyLocation == "Switzerland" & ReviewDate == 2010 & Rating == 3.5)
# Task 6: Store records of above countries in separate data frames and compare average ratings
avgRatingPortugal <- mean(dfPortugal$Rating)
avgRatingSpain <- mean(dfSpain$Rating)
avgRatingGermany <- mean(dfGermany$Rating)
avgRatingUSA <- mean(dfUSA$Rating)
# Task 4: Count records in Portugal, Spain, Germany, and USA
dfPortugal <- subset(dfCacao, CompanyLocation == "Portugal")
dfSpain <- subset(dfCacao, CompanyLocation == "Spain")
dfGermany <- subset(dfCacao, CompanyLocation == "Germany")
dfUSA <- subset(dfCacao, CompanyLocation == "USA.")
# Task 6: Store records of above countries in separate data frames and compare average ratings
avgRatingPortugal <- mean(dfPortugal$Rating)
avgRatingSpain <- mean(dfSpain$Rating)
avgRatingGermany <- mean(dfGermany$Rating)
avgRatingUSA <- mean(dfUSA$Rating)
# Task 6: Store records of above countries in separate data frames and compare average ratings
avgRatingPortugal <- mean(dfPortugal$Rating)
avgRatingSpain <- mean(dfSpain$Rating)
avgRatingGermany <- mean(dfGermany$Rating)
avgRatingUSA <- mean(dfUSA$Rating)
View(dfUSA)
View(dfUSA)
# Task 4: Count records in Portugal, Spain, Germany, and USA
dfPortugal <- subset(dfCacao, CompanyLocation == "Portugal")
dfSpain <- subset(dfCacao, CompanyLocation == "Spain")
dfGermany <- subset(dfCacao, CompanyLocation == "Germany")
dfUSA <- subset(dfCacao, CompanyLocation == "U.S.A.")
# Task 6: Store records of above countries in separate data frames and compare average ratings
avgRatingPortugal <- mean(dfPortugal$Rating)
avgRatingSpain <- mean(dfSpain$Rating)
avgRatingGermany <- mean(dfGermany$Rating)
avgRatingUSA <- mean(dfUSA$Rating)
# Task 7: Store all generated dataframes in excel format
write.xlsx(dfCacao, "dfCacao.xlsx", row.names = FALSE)
# Task 7: Store all generated dataframes in excel format
library(readxl)
library(openxlsx)
write.xlsx(dfCacao, "dfCacao.xlsx", row.names = FALSE)
write.xlsx(dfCacaoSorted, "dfCacaoSorted.xlsx", row.names = FALSE)
write.xlsx(dfPortugal, "dfPortugal.xlsx", row.names = FALSE)
write.xlsx(dfSpain, "dfSpain.xlsx", row.names = FALSE)
write.xlsx(dfGermany, "dfGermany.xlsx", row.names = FALSE)
write.xlsx(dfUSA, "dfUSA.xlsx", row.names = FALSE)
write.xlsx(dfSwitzerland2010, "dfSwitzerland2010.xlsx", row.names = FALSE)
# Display average ratings for comparison
cat("Average Rating in Portugal:", avgRatingPortugal, "\n")
cat("Average Rating in Spain:", avgRatingSpain, "\n")
cat("Average Rating in Germany:", avgRatingGermany, "\n")
cat("Average Rating in USA:", avgRatingUSA, "\n")
